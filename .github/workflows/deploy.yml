name: Deploy URL Summerizer

on:
  push:
    branches:
      - main  # 本番環境へのデプロイ
      - dev  # 開発環境へのデプロイ
  workflow_dispatch: # 手動実行用
    inputs:
      environment:
        description: 'デプロイ先環境'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - prod

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-west-2' # オレゴンリージョン

# OIDC認証のためのパーミッションを追加
permissions:
  id-token: write # OIDCトークンの生成に必要
  contents: read  # リポジトリ内容の読み取りに必要

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    # 環境の決定ロジック:
    # - workflow_dispatchの場合は選択された環境を使用
    # - pushの場合はブランチ名で判定
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js セットアップ（キャッシュなし）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # フロントエンドのビルド
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install --legacy-peer-deps
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.API_URL }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      # Lambda依存関係を適切にバンドル
      - name: Prepare Lambda Dependencies
        run: |
          cd backend
          npm install --production
          
          # すべての依存関係を含むpackage.jsonを作成
          cat > lambda/package.json <<EOL
          {
            "name": "url-summerizer-lambda",
            "version": "1.0.0",
            "description": "URL要約Lambda関数",
            "main": "index.js",
            "dependencies": {
              "mastra": "^0.5.0-alpha.8",
              "@aws-sdk/client-bedrock-runtime": "^3.515.0",
              "axios": "^1.6.7",
              "form-data": "^4.0.0",
              "langfuse": "^2.0.0"
            }
          }
          EOL
          
          # Lambda用に依存関係をインストール
          cd lambda
          npm install --production
          
          # サイズ確認とリスト表示
          echo "Lambda フォルダサイズ:"
          du -sh .
          echo "インストールされた依存パッケージ一覧："
          find node_modules -maxdepth 2 -type d | sort
      
      # CDK用の依存関係インストール
      - name: Install CDK Dependencies
        run: |
          cd infra
          npm install
      
      # AWS認証設定（OIDC連携）
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      # CDKブートストラップ (初回のみ必要)
      - name: CDK Bootstrap (if needed)
        run: |
          cd infra
          # TypeScriptの型チェックをスキップするための環境変数設定
          export TS_NODE_TRANSPILE_ONLY=1
          npx cdk bootstrap
      
      # CDKデプロイ
      - name: Deploy with CDK
        run: |
          cd infra
          # TypeScriptの型チェックをスキップするための環境変数設定
          export TS_NODE_TRANSPILE_ONLY=1
          npx cdk deploy --all --require-approval never
        env:
          ENV_NAME: ${{ env.ENV_NAME }}
          LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_HOST: ${{ secrets.LANGFUSE_HOST }}
          FIRECRAWL_API_ENDPOINT: ${{ vars.FIRECRAWL_API_ENDPOINT}}
          FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
      
      # フロントエンドをS3にデプロイ
      - name: Deploy Frontend to S3
        run: |
          echo "フロントエンドをS3バケットにデプロイしています..."
          aws s3 sync frontend/.next/static s3://usm-frontend-${{ env.ENV_NAME }}/_next/static/ --delete
          aws s3 cp frontend/public s3://usm-frontend-${{ env.ENV_NAME }}/ --recursive
          aws s3 sync frontend/out/ s3://usm-frontend-${{ env.ENV_NAME }}/ --delete
      
      # CloudFrontキャッシュの無効化
      - name: Invalidate CloudFront Cache
        run: |
          echo "CloudFrontキャッシュを無効化しています..."
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      
      # デプロイ完了通知
      - name: Deployment Status
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ env.ENV_NAME }}"
          echo "CloudFront URL: ${{ vars.CLOUDFRONT_DOMAIN_NAME }}"
          echo "API URL: ${{ vars.API_URL }}"
          echo "Timestamp: $(date)"
