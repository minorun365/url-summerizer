name: Deploy URL Summerizer

on:
  push:
    branches:
      - main  # 本番環境へのデプロイ
      - dev  # 開発環境へのデプロイ
  workflow_dispatch: # 手動実行用
    inputs:
      environment:
        description: 'デプロイ先環境'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - prod

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-west-2' # オレゴンリージョン

# OIDC認証のためのパーミッションを追加
permissions:
  id-token: write # OIDCトークンの生成に必要
  contents: read  # リポジトリ内容の読み取りに必要

jobs:
  # ビルド & デプロイを分離したジョブ構成
  build:
    name: Build Assets
    runs-on: ubuntu-latest
    
    # 環境の決定ロジック:
    # - workflow_dispatchの場合は選択された環境を使用
    # - pushの場合はブランチ名で判定
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js セットアップ（キャッシュ利用）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            infra/package-lock.json

      # フロントエンドビルド（静的生成）
      - name: Build Frontend
        run: |
          echo "フロントエンドをビルドしています..."
          cd frontend
          npm ci
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.API_URL }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      # フロントエンドビルド成果物をアップロード
      - name: Upload Frontend Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/out
            frontend/.next/static
            frontend/public
          retention-days: 1

      # Dockerイメージビルドと直接ECRプッシュ
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # AWS認証
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # AWSアカウントID取得
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $AWS_ACCOUNT_ID"

      # ECRログイン
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get-aws-account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # ECRリポジトリ作成（なければ）
      - name: Create ECR Repository
        run: |
          REPO_NAME="url-summerizer-lambda-${{ env.ENV_NAME }}"
          aws ecr describe-repositories --repository-names $REPO_NAME || aws ecr create-repository --repository-name $REPO_NAME

      # DockerイメージをビルドしてECRにプッシュ (Lambda互換形式)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.get-aws-account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/url-summerizer-lambda-${{ env.ENV_NAME }}:latest
          platforms: linux/arm64
          # Lambda互換性のために追加設定
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Lambda関数用のビルド引数
          build-args: |
            LAMBDA_TASK_ROOT=/var/task

      # CDK依存関係インストール
      - name: Install CDK Dependencies
        run: |
          cd infra
          npm ci
          npm install -g ts-node typescript aws-cdk
      
      # CDKアウトディレクトリをキャッシュ
      - name: Cache CDK Output
        uses: actions/upload-artifact@v4
        with:
          name: cdk-artifact
          path: infra
          retention-days: 1

  # デプロイジョブ
  deploy:
    name: Deploy Infrastructure
    needs: build
    runs-on: ubuntu-latest
    
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    
    steps:
      - name: Download CDK artifact
        uses: actions/download-artifact@v4
        with:
          name: cdk-artifact
          path: infra

      # AWS認証
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # AWSアカウントID取得
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          echo "IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/url-summerizer-lambda-${{ env.ENV_NAME }}:latest" >> $GITHUB_ENV

      # Node.js 依存関係インストール
      - name: Install Node.js dependencies
        run: |
          cd infra
          npm ci
          npm install -g ts-node typescript aws-cdk

      # CDKデプロイを専用の一時ディレクトリで実行
      - name: Deploy with CDK
        run: |
          cd infra
          
          # メモリ設定の最適化
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # TypeScriptの型チェックをスキップするための環境変数設定
          export TS_NODE_TRANSPILE_ONLY=1
          
          # パスを確認
          echo "PATH=$PATH"
          which ts-node || echo "ts-node not found"
          which cdk || echo "cdk not found"
          
          # CDKブートストラップ（アセットメタデータを最小化）
          npx cdk bootstrap
          
          # イメージURIを明示的に渡してCDKデプロイ
          npx cdk deploy --all \
            --require-approval never \
            --context dockerImageUri=$IMAGE_URI
        env:
          LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_HOST: ${{ secrets.LANGFUSE_HOST }}
          FIRECRAWL_API_ENDPOINT: ${{ vars.FIRECRAWL_API_ENDPOINT}}
          FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}

      # フロントエンドビルド成果物をダウンロード
      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend

      # S3デプロイ
      - name: Deploy Frontend to S3
        run: |
          echo "フロントエンドをS3バケットにデプロイしています..."
          
          # 静的ファイルをデプロイ
          if [ -d "frontend/public" ]; then
            aws s3 cp frontend/public s3://usm-frontend-${{ env.ENV_NAME }}/ --recursive
          fi
          
          # Nextの静的ファイルをデプロイ
          if [ -d "frontend/.next/static" ]; then
            aws s3 sync frontend/.next/static s3://usm-frontend-${{ env.ENV_NAME }}/_next/static/ --delete
          fi
          
          # Next.js静的エクスポートをデプロイ
          if [ -d "frontend/out" ]; then
            aws s3 sync frontend/out/ s3://usm-frontend-${{ env.ENV_NAME }}/ --delete
          fi

      # CloudFrontキャッシュの無効化
      - name: Invalidate CloudFront Cache
        run: |
          # CloudFrontディストリビューションIDを取得
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='URL Summerizer Frontend - ${{ env.ENV_NAME }}'].Id" --output text)
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "CloudFrontキャッシュを無効化しています... (ID: $DISTRIBUTION_ID)"
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          else
            echo "CloudFrontディストリビューションが見つかりません"
          fi
      
      # デプロイ完了通知
      - name: Deployment Status
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ env.ENV_NAME }}"
          echo "Timestamp: $(date)"
          
          # CloudFront URL取得
          CLOUDFRONT_DOMAIN=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='URL Summerizer Frontend - ${{ env.ENV_NAME }}'].DomainName" --output text)
          if [ -n "$CLOUDFRONT_DOMAIN" ]; then
            echo "CloudFront URL: https://$CLOUDFRONT_DOMAIN"
          fi
          
          # API URL取得
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='usm-api-${{ env.ENV_NAME }}'].id" --output text)
          if [ -n "$API_ID" ]; then
            echo "API URL: https://$API_ID.execute-api.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ENV_NAME }}/"
          fi
