name: Deploy URL Summerizer

on:
  push:
    branches:
      - main  # 本番環境へのデプロイ
      - dev  # 開発環境へのデプロイ
  workflow_dispatch: # 手動実行用
    inputs:
      environment:
        description: 'デプロイ先環境'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - prod

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-west-2' # オレゴンリージョン

# OIDC認証のためのパーミッションを追加
permissions:
  id-token: write # OIDCトークンの生成に必要
  contents: read  # リポジトリ内容の読み取りに必要

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    # 環境の決定ロジック:
    # - workflow_dispatchの場合は選択された環境を使用
    # - pushの場合はブランチ名で判定
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js セットアップ（キャッシュなし）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # フロントエンドのビルド
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install --legacy-peer-deps
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.API_URL }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}

      # Docker設定
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Dockerイメージのビルド（キャッシュ使用）
      - name: Build Docker image for Lambda
        run: |
          echo "Dockerイメージをビルドしています..."
          # プラットフォームを明示的に指定（Lambda用）かつロードオプションを追加
          docker buildx build \
            --platform linux/amd64 \
            --load \
            -t url-summerizer-lambda:latest .
          
          # イメージサイズを確認
          docker images | grep url-summerizer-lambda
      
      # CDK用の依存関係インストール
      - name: Install CDK Dependencies
        run: |
          cd infra
          npm install
      
      # AWS認証設定（OIDC連携）- ECR作成前に認証を行う
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR作成と認証
      - name: Set up ECR
        id: ecr-setup
        run: |
          # リポジトリ名を設定 (スタック名と環境名を利用)
          REPO_NAME="url-summerizer-lambda-${{ env.ENV_NAME }}"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          
          # AWS アカウントIDを取得
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          
          # リポジトリが存在しない場合は作成
          aws ecr describe-repositories --repository-names $REPO_NAME || aws ecr create-repository --repository-name $REPO_NAME
          
          # ECRログイン
          aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      
      # DockerイメージをECRにプッシュ
      - name: Push Docker image to ECR
        run: |
          REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ steps.ecr-setup.outputs.repo_name }}"
          
          # イメージにタグ付け
          docker tag url-summerizer-lambda:latest $REPO_URI:latest
          
          # ECRにプッシュ
          docker push $REPO_URI:latest
          
          # イメージURIを出力 (デバッグ用)
          echo "Pushed image: $REPO_URI:latest"
          
          # イメージURI環境変数として設定
          echo "IMAGE_URI=$REPO_URI:latest" >> $GITHUB_ENV

      # AWS認証設定（OIDC連携）
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      # ディスク容量を確保するための事前クリーンアップ
      - name: Free disk space
        run: |
          echo "ディスク容量を確認しています..."
          df -h
          
          echo "不要なファイルを削除しています..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          
          # node_modulesを削除してイメージサイズを小さくする
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
          
          echo "ディスク容量解放後の確認"
          df -h

      # CDKブートストラップ (初回のみ必要)
      - name: CDK Bootstrap (if needed)
        run: |
          cd infra
          # TypeScriptの型チェックをスキップするための環境変数設定
          export TS_NODE_TRANSPILE_ONLY=1
          npx cdk bootstrap
          
          # キャッシュをクリア
          rm -rf cdk.out

      # CDKデプロイ
      - name: Deploy with CDK
        run: |
          cd infra
          # TypeScriptの型チェックをスキップするための環境変数設定
          export TS_NODE_TRANSPILE_ONLY=1
          
          # コンテキスト変数としてイメージURIを渡す
          npx cdk deploy --all \
            --require-approval never \
            --context dockerImageUri=$IMAGE_URI \
            --exclusively
        env:
          ENV_NAME: ${{ env.ENV_NAME }}
          LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_HOST: ${{ secrets.LANGFUSE_HOST }}
          FIRECRAWL_API_ENDPOINT: ${{ vars.FIRECRAWL_API_ENDPOINT}}
          FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
      
      # フロントエンドのビルドとS3デプロイ
      - name: Rebuild and Deploy Frontend to S3
        run: |
          echo "フロントエンドを再ビルドしています..."
          cd frontend
          npm ci --production
          npm run build
          
          echo "フロントエンドをS3バケットにデプロイしています..."
          aws s3 cp public s3://usm-frontend-${{ env.ENV_NAME }}/ --recursive
          
          if [ -d ".next/static" ]; then
            aws s3 sync .next/static s3://usm-frontend-${{ env.ENV_NAME }}/_next/static/ --delete
          fi
          
          if [ -d "out" ]; then
            aws s3 sync out/ s3://usm-frontend-${{ env.ENV_NAME }}/ --delete
          fi
      
      # CloudFrontキャッシュの無効化
      - name: Invalidate CloudFront Cache
        run: |
          echo "CloudFrontキャッシュを無効化しています..."
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      
      # デプロイ完了通知
      - name: Deployment Status
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ env.ENV_NAME }}"
          echo "CloudFront URL: ${{ vars.CLOUDFRONT_DOMAIN_NAME }}"
          echo "API URL: ${{ vars.API_URL }}"
          echo "Timestamp: $(date)"
